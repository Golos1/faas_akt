// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: faas.proto

package faas_akt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Lambda_Invoke_FullMethodName = "/faas_akt.Lambda/Invoke"
)

// LambdaClient is the client API for Lambda service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LambdaClient interface {
	Invoke(ctx context.Context, in *LambdaParams, opts ...grpc.CallOption) (*LambdaResult, error)
}

type lambdaClient struct {
	cc grpc.ClientConnInterface
}

func NewLambdaClient(cc grpc.ClientConnInterface) LambdaClient {
	return &lambdaClient{cc}
}

func (c *lambdaClient) Invoke(ctx context.Context, in *LambdaParams, opts ...grpc.CallOption) (*LambdaResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LambdaResult)
	err := c.cc.Invoke(ctx, Lambda_Invoke_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LambdaServer is the server API for Lambda service.
// All implementations must embed UnimplementedLambdaServer
// for forward compatibility.
type LambdaServer interface {
	Invoke(context.Context, *LambdaParams) (*LambdaResult, error)
	mustEmbedUnimplementedLambdaServer()
}

// UnimplementedLambdaServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLambdaServer struct{}

func (UnimplementedLambdaServer) Invoke(context.Context, *LambdaParams) (*LambdaResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedLambdaServer) mustEmbedUnimplementedLambdaServer() {}
func (UnimplementedLambdaServer) testEmbeddedByValue()                {}

// UnsafeLambdaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LambdaServer will
// result in compilation errors.
type UnsafeLambdaServer interface {
	mustEmbedUnimplementedLambdaServer()
}

func RegisterLambdaServer(s grpc.ServiceRegistrar, srv LambdaServer) {
	// If the following call pancis, it indicates UnimplementedLambdaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Lambda_ServiceDesc, srv)
}

func _Lambda_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LambdaParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lambda_Invoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaServer).Invoke(ctx, req.(*LambdaParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Lambda_ServiceDesc is the grpc.ServiceDesc for Lambda service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lambda_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "faas_akt.Lambda",
	HandlerType: (*LambdaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _Lambda_Invoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "faas.proto",
}

const (
	Inngest_Trigger_FullMethodName = "/faas_akt.Inngest/Trigger"
)

// InngestClient is the client API for Inngest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InngestClient interface {
	Trigger(ctx context.Context, in *InngestEvent, opts ...grpc.CallOption) (*InvokedSuccessfully, error)
}

type inngestClient struct {
	cc grpc.ClientConnInterface
}

func NewInngestClient(cc grpc.ClientConnInterface) InngestClient {
	return &inngestClient{cc}
}

func (c *inngestClient) Trigger(ctx context.Context, in *InngestEvent, opts ...grpc.CallOption) (*InvokedSuccessfully, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvokedSuccessfully)
	err := c.cc.Invoke(ctx, Inngest_Trigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InngestServer is the server API for Inngest service.
// All implementations must embed UnimplementedInngestServer
// for forward compatibility.
type InngestServer interface {
	Trigger(context.Context, *InngestEvent) (*InvokedSuccessfully, error)
	mustEmbedUnimplementedInngestServer()
}

// UnimplementedInngestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInngestServer struct{}

func (UnimplementedInngestServer) Trigger(context.Context, *InngestEvent) (*InvokedSuccessfully, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trigger not implemented")
}
func (UnimplementedInngestServer) mustEmbedUnimplementedInngestServer() {}
func (UnimplementedInngestServer) testEmbeddedByValue()                 {}

// UnsafeInngestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InngestServer will
// result in compilation errors.
type UnsafeInngestServer interface {
	mustEmbedUnimplementedInngestServer()
}

func RegisterInngestServer(s grpc.ServiceRegistrar, srv InngestServer) {
	// If the following call pancis, it indicates UnimplementedInngestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Inngest_ServiceDesc, srv)
}

func _Inngest_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InngestEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InngestServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inngest_Trigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InngestServer).Trigger(ctx, req.(*InngestEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// Inngest_ServiceDesc is the grpc.ServiceDesc for Inngest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inngest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "faas_akt.Inngest",
	HandlerType: (*InngestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trigger",
			Handler:    _Inngest_Trigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "faas.proto",
}
